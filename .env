#### B. `.env` (For Local Development Configuration)

This file holds secret placeholders.

| File | Content |
| :--- | :--- |
| **`.env`** | ```
# .env file for local development and testing
# IMPORTANT: Use a complex, random key for your actual deployment host environment.
SECRET_KEY="5RYDX9AxuAWh1JLQEaBVqvgiCTYi7LM9"

# Placeholder for PostgreSQL connection string.
# Replace this with the actual URL provided by ElephantSQL or Render Postgres.
DATABASE_URL="postgresql://patent_user:5RYDX9AxuAWh1JLQEaBVqvgiCTYi7LM9@dpg-d3j8vimr433s73cthrk0-a.oregon-postgres.render.com/patent_db_afwl"
``` |

### Step 1.3: Delete Local Database and Finalize Code

Since you are migrating to a remote database, the local `site.db` file is no longer needed and would cause conflicts.

1.  **Delete the local `site.db` file.**
2.  **Ensure your `app.py` is using the `DATABASE_URL` environment variable** (as done in the previous steps).

***

## Phase 2: Remote Setup and Data Migration

### Step 2.1: Set up Free PostgreSQL Database (ElephantSQL)

1.  Go to **ElephantSQL** and sign up for the **"Tiny Turtle"** (free) plan.
2.  Create an instance and find the **URL** connection string (it looks like `postgres://user:pass@host/db`).
3.  **Copy this URL.** This is your persistent `DATABASE_URL`.

### Step 2.2: Deploy to Render (Recommended Host)

1.  **Push Code to GitHub:** Initialize Git in your project and push your full repository (including `app.py`, `Procfile`, `requirements.txt`, `templates/`, `static/`) to a **GitHub** repository. **(Do NOT push the `.env` file.)**

2.  **Deploy on Render:**
    * Go to **Render** and create a **New Web Service**.
    * Connect your GitHub repository.
    * **Environment Variables:** This is the critical step for security and persistence:
        * Add `SECRET_KEY`: Use a long, complex string (e.g., generated with a password generator).
        * Add `DATABASE_URL`: Paste the full connection URL you copied from **ElephantSQL**.

3.  **Initial Build and Data Creation:**
    Render will execute your `Procfile` (`gunicorn app:app`). When your application runs for the first time on Render, the `if __name__ == '__main__':` block *does not run*.

    **To create your tables and Super Admin remotely (CRITICAL STEP):**

    * After the Render deploy finishes, go to the **Shell** tab for your service in the Render dashboard.
    * Run the Python console:
        ```bash
        python
        ```
    * Manually run the setup function in the console:
        ```python
        from app import create_default_admin
        create_default_admin()
        exit()
        ```

Your application is now running with a persistent PostgreSQL database, and your Super Admin account (**Grid.Thoma / gridthoma123**) is created remotely.